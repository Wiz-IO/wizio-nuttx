'''
   Copyright 2024 (c) WizIO ( Georgi Angelov )
   arch/arm/src/common/Make.defs
'''
from os.path import join
from frameworks.wiz import DEF, EQU, GET, FILTER_APPLY, FILTER_ADD
Import('env') ; Import('clone'); 

def _(file): return join(SRC, file)

clone.Append(
   CPPPATH = [ env.DIR_COMMON_SRC ], # arch/arm/src/common 
)

if EQU(env, 'CONFIG_ARCH_CORTEXM4'): 
   cortex = ['-mtune=cortex-m4','-march=armv7e-m']
   if EQU(env, 'CONFIG_ARCH_FPU'): 
      cortex.extend( ['-mfpu=fpv4-sp-d16'] )
if EQU(env, 'CONFIG_ARCH_FPU', 'y'):
   if EQU(env, 'CONFIG_ARM_FPU_ABI_SOFT'): 
      cortex.extend( ['-mfloat-abi=softfp'] )
   else: 
      cortex.extend( ['-mfloat-abi=hard'] )
else:
   cortex.extend( ['-mfloat-abi=soft'] )  
if EQU(env, 'CONFIG_ENDIAN_BIG'):
   cortex.extend( ['-mbig-endian'] )
else:
   cortex.extend( ['-mlittle-endian'] )
if EQU(env, 'CONFIG_ARM_THUMB'):
   cortex.extend( ['-mthumb','-Wa,-mthumb','-Wa,-mimplicit-it=always'] )
env.Append( 
   ASFLAGS   = [ cortex ],
   CCFLAGS   = [ cortex ],
   LINKFLAGS = [ cortex ],
)
clone.Append( 
   ASFLAGS   = [ cortex ],
   CCFLAGS   = [ cortex ],
   LINKFLAGS = [ cortex ],
)
#arch/arm/src/common/Toolchain.defs
# TODO !!!
if EQU(env, 'CONFIG_DEBUG_CUSTOMOPT'):
   env.Append( CCFLAGS = [ GET(env, 'CONFIG_DEBUG_OPTLEVEL')] )
else:
   env.Append( CCFLAGS = ['-Os'] )
if not EQU(env, 'CONFIG_DEBUG_NOOPT'):
   env.Append( CCFLAGS = ['-fno-strict-aliasing'] )
if EQU(env, 'CONFIG_FRAME_POINTER'): 
   env.Append( CCFLAGS = ['-fno-omit-frame-pointer','-fno-optimize-sibling-calls'] )
else: 
   env.Append( CCFLAGS = ['-fomit-frame-pointer'] )  
if EQU(env, 'CONFIG_STACK_CANARIES'): 
   env.Append( CCFLAGS = ['-fstack-protector-all'] )  
if EQU(env, 'CONFIG_STACK_USAGE'): 
   env.Append( CCFLAGS = ['-fstack-usage'] )  
if EQU(env, 'CONFIG_STACK_USAGE_WARNING'): # not 0
   env.Append( CCFLAGS = ['-Wstack-usage=' + GET(env, 'CONFIG_STACK_USAGE_WARNING')])  
if EQU(env, 'CONFIG_ARCH_COVERAGE_ALL'): 
   env.Append( CCFLAGS = ['-fprofile-generate','-ftest-coverage'] )  
if EQU(env, 'CONFIG_MM_UBSAN_ALL'): 
   env.Append( CCFLAGS = [GET(env, 'CONFIG_MM_UBSAN_OPTION')] )
if EQU(env, 'CONFIG_MM_UBSAN_TRAP_ON_ERROR'): 
   env.Append( CCFLAGS = ['-fsanitize-undefined-trap-on-error'] ) 
if EQU(env, 'CONFIG_MM_KASAN_ALL'): 
   env.Append( CCFLAGS = ['-fsanitize=kernel-address'] ) 
if EQU(env, 'CONFIG_MM_KASAN_GLOBAL'): 
   env.Append( CCFLAGS = ['--param','asan-globals=1'] ) 
if EQU(env, 'CONFIG_MM_KASAN_DISABLE_READS_CHECK'): 
   env.Append( CCFLAGS = ['--param','asan-instrument-reads=0'] ) 
if EQU(env, 'CONFIG_MM_KASAN_DISABLE_WRITES_CHECK'): 
   env.Append( CCFLAGS = ['--param','asan-instrument-writes=0'] ) 
if EQU(env, 'CONFIG_ARCH_INSTRUMENT_ALL'): 
   env.Append( CCFLAGS = ['-finstrument-functions'] ) 
if EQU(env, 'CONFIG_UNWINDER_ARM'):
   env.Append( CCFLAGS = ['-funwind-tables','-fasynchronous-unwind-tables'] )
# if EQU(env, ''):env.Append( CCFLAGS = [''] )
if EQU(env, 'CONFIG_LTO_THIN'):
   env.Append( CCFLAGS = ['-flto=thin'] )
else:
   if EQU(env, 'CONFIG_LTO_FULL'):
      env.Append( CCFLAGS = ['-flto'] )
   if EQU(env, 'CONFIG_ARM_TOOLCHAIN_GNU_EABI'):
      env.Append( CCFLAGS = ['-fuse-linker-plugin'] )

SRC = join(env.DIR_NUTTX, 'arch', 'arm', 'src', 'common')
conditions = [
    ('', '', 
        _('arm_allocateheap.c'), _('arm_createstack.c'), _('arm_exit.c'), _('arm_getintstack.c'),
        _('arm_initialize.c'), _('arm_lowputs.c'), _('arm_modifyreg8.c'), _('arm_modifyreg16.c'),
        _('arm_modifyreg32.c'), _('arm_nputs.c'), _('arm_releasestack.c'), _('arm_registerdump.c'),
        _('arm_stackframe.c'), _('arm_switchcontext.c'), _('arm_usestack.c'), _('arm_fork.c'), 
        _(join('gnu','fork.S')),               
    ),
    ('y', 'CONFIG_STACK_COLORATION',        _('arm_checkstack.c')),
    ('y', 'CONFIG_ARM_SEMIHOSTING_SYSLOG',  _('arm_semi_syslog.c')),
    ('y', 'CONFIG_ARM_SEMIHOSTING_HOSTFS',  _('arm_hostfs.c')),
    ('y', 'CONFIG_SCHED_THREAD_LOCAL',      _('arm_tls.c')),
    ('y', 'CONFIG_UNWINDER_FRAME_POINTER',  _('arm_backtrace_fp.c')),
    ('y', 'CONFIG_UNWINDER_STACK_POINTER',  _('arm_backtrace_sp.c')),
    ('y', 'CONFIG_UNWINDER_ARM',            _('arm_backtrace_unwind.c')),
    ('y', 'CONFIG_ARCH_HAVE_FETCHADD',      _(join('gnu', 'arm_fetchadd.S'))),    
]
FILTER_APPLY(clone, conditions)

if not EQU(clone, 'CONFIG_ARCH_IDLE_CUSTOM'):
   FILTER_ADD(clone, [_('arm_idle.c')])

if DEF(clone, 'CONFIG_BUILD_PROTECTED') and EQU(clone, 'CONFIG_BUILD_KERNEL'):
   FILTER_ADD(clone, [_('arm_task_start.c'),_('arm_pthread_start.c'),_('arm_signal_dispatch.c')])
   if EQU(clone, 'CONFIG_BUILD_PROTECTED'):
      FILTER_ADD(clone, [_(join('gnu', 'arm_signal_handler.S'))])

if EQU(clone, 'CONFIG_ARCH_HAVE_TESTSET'):
    if DEF(clone, 'CONFIG_ARCH_ARMV6M'):
      FILTER_ADD(clone, [_(join('gnu', 'arm_testset.S'))])

if not EQU(clone, 'CONFIG_ALARM_ARCH'): 
   if not EQU(clone, 'CONFIG_TIMER_ARCH'): 
      FILTER_ADD(clone, [_('arm_mdelay.c'), _('arm_udelay.c')])